{"ast":null,"code":"import { assert, isArray, normalizeFileName } from './utils';\nimport { downloadFile } from './processors';\nimport { _prepareData, _createJSONData, createCSVData, createXLSData, createXMLData, _createFieldsMapper } from './converters';\n\nfunction exportFromJSON(_a) {\n  var data = _a.data,\n      _b = _a.fileName,\n      fileName = _b === void 0 ? 'download' : _b,\n      extension = _a.extension,\n      _c = _a.fileNameFormatter,\n      fileNameFormatter = _c === void 0 ? function (name) {\n    return name.replace(/\\s+/, '_');\n  } : _c,\n      fields = _a.fields,\n      _d = _a.exportType,\n      exportType = _d === void 0 ? 'txt' : _d,\n      _e = _a.replacer,\n      replacer = _e === void 0 ? null : _e,\n      _f = _a.space,\n      space = _f === void 0 ? 4 : _f,\n      _g = _a.processor,\n      processor = _g === void 0 ? downloadFile : _g,\n      _h = _a.withBOM,\n      withBOM = _h === void 0 ? false : _h,\n      _j = _a.delimiter,\n      delimiter = _j === void 0 ? ',' : _j,\n      _k = _a.beforeTableEncode,\n      beforeTableEncode = _k === void 0 ? function (i) {\n    return i;\n  } : _k;\n  var MESSAGE_IS_ARRAY_FAIL = 'Invalid export data. Please provide an array of object';\n  var MESSAGE_UNKNOWN_EXPORT_TYPE = \"Can't export unknown data type \" + exportType + \".\";\n  var MESSAGE_FIELD_INVALID = \"Can't export string data to \" + exportType + \".\";\n\n  if (typeof data === 'string') {\n    switch (exportType) {\n      case 'txt':\n      case 'css':\n      case 'html':\n        {\n          return processor(data, exportType, normalizeFileName(fileName, extension !== null && extension !== void 0 ? extension : exportType, fileNameFormatter));\n        }\n\n      default:\n        throw new Error(MESSAGE_FIELD_INVALID);\n    }\n  }\n\n  var fieldsMapper = _createFieldsMapper(fields);\n\n  var safeData = fieldsMapper(_prepareData(data));\n\n  var JSONData = _createJSONData(safeData, replacer, space);\n\n  switch (exportType) {\n    case 'txt':\n    case 'css':\n    case 'html':\n      {\n        return processor(JSONData, exportType, normalizeFileName(fileName, extension !== null && extension !== void 0 ? extension : exportType, fileNameFormatter));\n      }\n\n    case 'json':\n      {\n        return processor(JSONData, exportType, normalizeFileName(fileName, extension !== null && extension !== void 0 ? extension : 'json', fileNameFormatter));\n      }\n\n    case 'csv':\n      {\n        assert(isArray(safeData), MESSAGE_IS_ARRAY_FAIL);\n        var BOM = '\\ufeff';\n        var CSVData = createCSVData(safeData, delimiter, beforeTableEncode);\n        var content = withBOM ? BOM + CSVData : CSVData;\n        return processor(content, exportType, normalizeFileName(fileName, extension !== null && extension !== void 0 ? extension : 'csv', fileNameFormatter));\n      }\n\n    case 'xls':\n      {\n        assert(isArray(safeData), MESSAGE_IS_ARRAY_FAIL);\n        var content = createXLSData(safeData, beforeTableEncode);\n        return processor(content, exportType, normalizeFileName(fileName, extension !== null && extension !== void 0 ? extension : 'xls', fileNameFormatter));\n      }\n\n    case 'xml':\n      {\n        var content = createXMLData(safeData);\n        return processor(content, exportType, normalizeFileName(fileName, extension !== null && extension !== void 0 ? extension : 'xml', fileNameFormatter));\n      }\n\n    default:\n      throw new Error(MESSAGE_UNKNOWN_EXPORT_TYPE);\n  }\n}\n\n(function (exportFromJSON) {\n  exportFromJSON.types = {\n    txt: 'txt',\n    css: 'css',\n    html: 'html',\n    json: 'json',\n    csv: 'csv',\n    xls: 'xls',\n    xml: 'xml'\n  };\n  exportFromJSON.processors = {\n    downloadFile: downloadFile\n  };\n})(exportFromJSON || (exportFromJSON = {}));\n\nexport default exportFromJSON;","map":{"version":3,"sources":["C:/Users/scui/Documents/GitHub/metal-price-frontend/node_modules/export-from-json/dist/esm/exportFromJSON.js"],"names":["assert","isArray","normalizeFileName","downloadFile","_prepareData","_createJSONData","createCSVData","createXLSData","createXMLData","_createFieldsMapper","exportFromJSON","_a","data","_b","fileName","extension","_c","fileNameFormatter","name","replace","fields","_d","exportType","_e","replacer","_f","space","_g","processor","_h","withBOM","_j","delimiter","_k","beforeTableEncode","i","MESSAGE_IS_ARRAY_FAIL","MESSAGE_UNKNOWN_EXPORT_TYPE","MESSAGE_FIELD_INVALID","Error","fieldsMapper","safeData","JSONData","BOM","CSVData","content","types","txt","css","html","json","csv","xls","xml","processors"],"mappings":"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","sourcesContent":["import { assert, isArray, normalizeFileName } from './utils';\nimport { downloadFile } from './processors';\nimport { _prepareData, _createJSONData, createCSVData, createXLSData, createXMLData, _createFieldsMapper } from './converters';\nfunction exportFromJSON(_a) {\n    var data = _a.data, _b = _a.fileName, fileName = _b === void 0 ? 'download' : _b, extension = _a.extension, _c = _a.fileNameFormatter, fileNameFormatter = _c === void 0 ? function (name) { return name.replace(/\\s+/, '_'); } : _c, fields = _a.fields, _d = _a.exportType, exportType = _d === void 0 ? 'txt' : _d, _e = _a.replacer, replacer = _e === void 0 ? null : _e, _f = _a.space, space = _f === void 0 ? 4 : _f, _g = _a.processor, processor = _g === void 0 ? downloadFile : _g, _h = _a.withBOM, withBOM = _h === void 0 ? false : _h, _j = _a.delimiter, delimiter = _j === void 0 ? ',' : _j, _k = _a.beforeTableEncode, beforeTableEncode = _k === void 0 ? function (i) { return i; } : _k;\n    var MESSAGE_IS_ARRAY_FAIL = 'Invalid export data. Please provide an array of object';\n    var MESSAGE_UNKNOWN_EXPORT_TYPE = \"Can't export unknown data type \" + exportType + \".\";\n    var MESSAGE_FIELD_INVALID = \"Can't export string data to \" + exportType + \".\";\n    if (typeof data === 'string') {\n        switch (exportType) {\n            case 'txt':\n            case 'css':\n            case 'html': {\n                return processor(data, exportType, normalizeFileName(fileName, extension !== null && extension !== void 0 ? extension : exportType, fileNameFormatter));\n            }\n            default:\n                throw new Error(MESSAGE_FIELD_INVALID);\n        }\n    }\n    var fieldsMapper = _createFieldsMapper(fields);\n    var safeData = fieldsMapper(_prepareData(data));\n    var JSONData = _createJSONData(safeData, replacer, space);\n    switch (exportType) {\n        case 'txt':\n        case 'css':\n        case 'html': {\n            return processor(JSONData, exportType, normalizeFileName(fileName, extension !== null && extension !== void 0 ? extension : exportType, fileNameFormatter));\n        }\n        case 'json': {\n            return processor(JSONData, exportType, normalizeFileName(fileName, extension !== null && extension !== void 0 ? extension : 'json', fileNameFormatter));\n        }\n        case 'csv': {\n            assert(isArray(safeData), MESSAGE_IS_ARRAY_FAIL);\n            var BOM = '\\ufeff';\n            var CSVData = createCSVData(safeData, delimiter, beforeTableEncode);\n            var content = withBOM ? BOM + CSVData : CSVData;\n            return processor(content, exportType, normalizeFileName(fileName, extension !== null && extension !== void 0 ? extension : 'csv', fileNameFormatter));\n        }\n        case 'xls': {\n            assert(isArray(safeData), MESSAGE_IS_ARRAY_FAIL);\n            var content = createXLSData(safeData, beforeTableEncode);\n            return processor(content, exportType, normalizeFileName(fileName, extension !== null && extension !== void 0 ? extension : 'xls', fileNameFormatter));\n        }\n        case 'xml': {\n            var content = createXMLData(safeData);\n            return processor(content, exportType, normalizeFileName(fileName, extension !== null && extension !== void 0 ? extension : 'xml', fileNameFormatter));\n        }\n        default:\n            throw new Error(MESSAGE_UNKNOWN_EXPORT_TYPE);\n    }\n}\n(function (exportFromJSON) {\n    exportFromJSON.types = {\n        txt: 'txt',\n        css: 'css',\n        html: 'html',\n        json: 'json',\n        csv: 'csv',\n        xls: 'xls',\n        xml: 'xml',\n    };\n    exportFromJSON.processors = { downloadFile: downloadFile };\n})(exportFromJSON || (exportFromJSON = {}));\nexport default exportFromJSON;\n"]},"metadata":{},"sourceType":"module"}